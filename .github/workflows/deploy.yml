name: CI & Deploy to Hetzner

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest version

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9 # Use pnpm v9 to match local environment

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Ensure this matches your project's requirement (check package.json engines field)
          cache: 'pnpm' # Cache pnpm dependencies

      - name: Check for lockfile
        run: |
          pwd
          ls -la
          echo "--- Checking pnpm-lock.yaml head ---"
          head -n 10 pnpm-lock.yaml || echo "pnpm-lock.yaml not found or empty"

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      # - name: Run tests # Uncomment this block if you have tests configured

      - name: Build Nuxt
        run: pnpm run build
        env:
          NODE_ENV: production
          NUXT_NEXTAUTH_SECRET: ${{ secrets.NUXT_NEXTAUTH_SECRET }}
          NUXT_NEXTAUTH_URL: ${{ secrets.NUXT_NEXTAUTH_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Add any other build-time environment variables needed from secrets
          # DATABASE_URL: ${{ secrets.DATABASE_URL_BUILD_TIME }}
          # NUXT_PUBLIC_API_BASE: ${{ secrets.NUXT_PUBLIC_API_BASE }}

      - name: Prepare deployment package
        run: |
          mkdir deployment-package
          cp -R .output deployment-package/
          cp -R prisma deployment-package/
          cp -R scripts deployment-package/
          cp package.json pnpm-lock.yaml ecosystem.config.cjs deployment-package/
          # Copy .env file if your production server needs it and it's not managed otherwise
          # if [ -f .env ]; then cp .env deployment-package/.env; fi 
          # Make sure .env is gitignored if you copy it!
          echo "Deployment package created."
          ls -la deployment-package # List contents for debugging

      - name: Clean target directory on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            echo "Cleaning target directory before deployment..."
            sudo rm -rf /var/www/dreamseed/{*,.*} 2>/dev/null || true
            sudo mkdir -p /var/www/dreamseed
            echo "Cleanup complete."

      - name: Copy deployment package to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          source: "deployment-package/*" # Copy contents of the package dir
          target: "/var/www/dreamseed"  # Target directory on the server
          strip_components: 1 # Remove the 'deployment-package' directory layer
          overwrite: true # Ensure files are overwritten

      - name: Create environment file on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            set -e
            cd /var/www/dreamseed
            
            # Try to create .env file with secrets first
            echo "Attempting to create .env file with GitHub secrets..."
            cat > .env << EOF
            DATABASE_URL="${{ secrets.DATABASE_URL }}"
            NUXT_GOOGLE_CLIENT_ID="${{ secrets.NUXT_GOOGLE_CLIENT_ID }}"
            NUXT_GOOGLE_CLIENT_SECRET="${{ secrets.NUXT_GOOGLE_CLIENT_SECRET }}"
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
            NUXT_NEXTAUTH_SECRET_VALUE="${{ secrets.NUXT_NEXTAUTH_SECRET_VALUE }}"
            EOF
            
            # Check if .env file exists and has content
            if [ ! -f .env ] || [ ! -s .env ]; then
              echo "ERROR: .env file missing or empty. Creating fallback .env file..."
                             cat > .env << 'FALLBACK_EOF'
            DATABASE_URL="postgresql://USERNAME:PASSWORD@HOST:5432/DATABASE?schema=public"
            NUXT_GOOGLE_CLIENT_ID="REPLACE_WITH_ACTUAL_GOOGLE_CLIENT_ID"
            NUXT_GOOGLE_CLIENT_SECRET="REPLACE_WITH_ACTUAL_GOOGLE_CLIENT_SECRET"
            GEMINI_API_KEY="REPLACE_WITH_ACTUAL_GEMINI_API_KEY"
            NUXT_NEXTAUTH_SECRET_VALUE="REPLACE_WITH_ACTUAL_NEXTAUTH_SECRET"
            FALLBACK_EOF
              echo "FALLBACK .env file created. You need to manually update the placeholder values!"
            else
              echo "Environment file created successfully from GitHub secrets"
            fi
            
            # Verify .env file content (show first 10 chars of each var for security)
            echo "Current .env file content (partial):"
            if [ -f .env ]; then
              while IFS='=' read -r key value; do
                if [[ $key && $value && ! $key =~ ^# ]]; then
                  echo "- $key: ${value:0:10}..."
                fi
              done < .env
            else
              echo "ERROR: .env file still missing!"
            fi

      - name: Deploy & start on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
              set -e
              cd /var/www/dreamseed
  
              # 1) install production deps (this will trigger postinstall script with prisma generate)
              pnpm install --prod --no-frozen-lockfile
  
              # 3) reload PM2 with the new environment
              pm2 restart ecosystem.config.cjs --env prod