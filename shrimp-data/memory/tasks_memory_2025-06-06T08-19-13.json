{
  "tasks": [
    {
      "id": "5e798810-8c44-4466-b330-780a8f1b7249",
      "name": "Fix ImageStrip Unnecessary Reloading",
      "description": "Modify the watcher in `ImageStrip.vue` to be less sensitive. It should only clear the image list and fetch new ones when the `dreamId` changes to a different, valid number. This will prevent it from reloading when a snapshot is loaded or when the dreamId is set to null.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-06T07:10:01.889Z",
      "updatedAt": "2025-06-06T07:10:26.743Z",
      "relatedFiles": [
        {
          "path": "components/ImageStrip.vue",
          "type": "TO_MODIFY",
          "description": "The watcher in this component is too sensitive and causes unnecessary reloads."
        }
      ],
      "implementationGuide": "1. Open `components/ImageStrip.vue`. \n2. Locate the `watch` effect that observes `props.dreamId`. \n3. The current logic is complex and handles multiple cases. Simplify it. The core logic should be: if `newDreamId` is a valid number and is different from `oldDreamId`, then fetch images. If `newDreamId` is null, clear the images. \n4. Replace the existing `watch` block with a cleaner version that explicitly checks `newDreamId !== oldDreamId` before fetching.",
      "verificationCriteria": "1. Navigate to a dream page with existing images. \n2. Click the 3-dot menu on an image in the `ImageStrip` and select 'View Snapshot'. \n3. Verify that the `ImageStrip` component does *not* reload. \n4. Navigate from a saved dream back to a new session (where dreamId is null). Verify the strip clears correctly. \n5. Load a different dream. Verify the strip updates with the new images.",
      "summary": "The `watch` effect in `ImageStrip.vue` was refactored to be more robust and less prone to unnecessary re-renders. The previous complex logic was replaced with a clear, simple check: `if (newDreamId === oldDreamId) return;`. This ensures that the fetching logic only runs when the `dreamId` prop actually changes to a different value. It correctly handles loading new dreams by fetching images and clearing the strip for new sessions (`dreamId` is null). This change directly fixes the reported bug where loading a snapshot would cause the strip to reload, as that action no longer causes a change in the `dreamId`.",
      "completedAt": "2025-06-06T07:10:26.743Z"
    },
    {
      "id": "aada3983-cdce-4ca4-83e0-504ad3cddcf7",
      "name": "Update Image API and Frontend Types",
      "description": "Ensure the backend API endpoints for fetching images (`/api/images/user` and `/api/images`) return the `dreamId` and `graphState` fields. Update the corresponding frontend type interfaces to include these new fields.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-06T07:10:01.889Z",
      "updatedAt": "2025-06-06T07:11:34.855Z",
      "relatedFiles": [
        {
          "path": "server/api/images/user.get.ts",
          "type": "TO_MODIFY",
          "description": "API endpoint for user-specific images."
        },
        {
          "path": "server/api/images/index.get.ts",
          "type": "TO_MODIFY",
          "description": "API endpoint for dream-specific images."
        },
        {
          "path": "components/UserImageGallery.vue",
          "type": "TO_MODIFY",
          "description": "Contains an interface to update."
        },
        {
          "path": "components/ImageStrip.vue",
          "type": "TO_MODIFY",
          "description": "Contains an interface to update."
        },
        {
          "path": "components/ImageViewerModal.vue",
          "type": "TO_MODIFY",
          "description": "Contains an interface to update."
        }
      ],
      "implementationGuide": "1. Locate the API endpoint files: `server/api/images/user.get.ts` and `server/api/images/index.get.ts`. \n2. Inspect the Prisma `findMany` queries. Ensure that `dreamId: true` and `graphState: true` are included in the `select` object. \n3. Update the `GalleryImage` interface in `components/UserImageGallery.vue` to include `dreamId: number;` and `graphState?: any;`. \n4. Update the `GalleryImage` interface in `components/ImageViewerModal.vue` to match. \n5. The `DreamImage` interface in `ImageStrip.vue` also needs `dreamId` and `graphState`.",
      "verificationCriteria": "1. After changes, verify that API responses for both endpoints include `dreamId` and `graphState`. \n2. Verify no new TypeScript errors exist.",
      "summary": "I have successfully updated the frontend types to align with the backend data model. The API endpoints were confirmed to return the complete `GeneratedImage` object, so no backend changes were necessary. I updated the `GalleryImage` and `DreamImage` interfaces in `UserImageGallery.vue`, `ImageViewerModal.vue`, and `ImageStrip.vue` to include the `dreamId` and `graphState` fields. This ensures that the snapshot data is available throughout the image viewing components, paving the way for the next task of implementing the snapshot loading feature. All changes are type-safe and correct.",
      "completedAt": "2025-06-06T07:11:34.855Z"
    },
    {
      "id": "9b2db9c6-d89b-4e2c-be48-512a597ac4f7",
      "name": "Enhance ImageViewerModal with Snapshot Logic",
      "description": "Add a 'Load Snapshot' button and the corresponding logic to the `ImageViewerModal` component. This includes adding a `context` prop to determine the button's behavior.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "aada3983-cdce-4ca4-83e0-504ad3cddcf7"
        }
      ],
      "createdAt": "2025-06-06T07:10:01.889Z",
      "updatedAt": "2025-06-06T07:12:32.588Z",
      "relatedFiles": [
        {
          "path": "components/ImageViewerModal.vue",
          "type": "TO_MODIFY",
          "description": "The primary file to be enhanced."
        }
      ],
      "implementationGuide": "1. Edit `components/ImageViewerModal.vue`. \n2. Add a new prop: `context: { type: String as PropType<'gallery' | 'dream-session'>, required: true }`. \n3. In the template's info container, add a `<Button label=\"Load Snapshot\" icon=\"pi pi-history\" ... />`. Show it only if `selectedImage.value.graphState`. \n4. Import `useRouter` from `vue-router` and `useTagStore` from `~/store/tagStore`. \n5. Implement the `handleLoadSnapshot` function as detailed in the analysis.",
      "verificationCriteria": "1. Verify the 'Load Snapshot' button appears when viewing an image with a snapshot. \n2. Verify the button is hidden if the image has no `graphState`.",
      "summary": "I have successfully enhanced the `ImageViewerModal.vue` component. I added the `context` prop to allow for different behaviors, implemented the `handleLoadSnapshot` function to contain this logic, and added a new 'Load Snapshot' button that appears conditionally. I also resolved several TypeScript errors related to type-only imports and payload structures to ensure the code is robust. The component is now ready for the next steps of creating the necessary `tagStore` actions and integrating it into the parent components.",
      "completedAt": "2025-06-06T07:12:32.588Z"
    },
    {
      "id": "8bcb5b4e-d3b2-43bf-b79a-0a1c0290495f",
      "name": "Update tagStore for Cross-Route Snapshot Loading",
      "description": "Modify the `tagStore` to support loading a snapshot after a route change. This involves adding state to hold a pending snapshot and actions to manage it.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "9b2db9c6-d89b-4e2c-be48-512a597ac4f7"
        }
      ],
      "createdAt": "2025-06-06T07:10:01.889Z",
      "updatedAt": "2025-06-06T08:08:41.870Z",
      "relatedFiles": [
        {
          "path": "store/tagStore.ts",
          "type": "TO_MODIFY",
          "description": "The Pinia store to be updated."
        }
      ],
      "implementationGuide": "1. Edit `store/tagStore.ts`. \n2. Add new state: `pendingSnapshot: ref(null)`. \n3. Add new action: `setPendingSnapshot(image) { this.pendingSnapshot = image; }`. \n4. Add new action: `consumePendingSnapshot() { const snap = this.pendingSnapshot; this.pendingSnapshot = null; return snap; }`.",
      "verificationCriteria": "1. Verify the new state and actions are present in the store. \n2. Verify there are no errors in the store file.",
      "summary": "I have successfully updated the `tagStore` to support cross-route snapshot loading. I added a new `ImageSnapshot` interface for type safety, introduced the `pendingSnapshot` ref to hold the snapshot data during navigation, and implemented the `setPendingSnapshot` and `consumePendingSnapshot` actions to manage this state. The new actions are correctly exposed from the store. This completes the necessary state management foundation for the final integration task.",
      "completedAt": "2025-06-06T08:08:41.870Z"
    },
    {
      "id": "0f355eaf-ff01-482a-8372-4bf0a6b787ce",
      "name": "Integrate Snapshot Logic into Parent Components",
      "description": "Update `TagCloud.vue` and `UserImageGallery.vue` to correctly use the newly enhanced `ImageViewerModal`.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "8bcb5b4e-d3b2-43bf-b79a-0a1c0290495f"
        }
      ],
      "createdAt": "2025-06-06T07:10:01.889Z",
      "updatedAt": "2025-06-06T08:10:21.599Z",
      "relatedFiles": [
        {
          "path": "components/TagCloud.vue",
          "type": "TO_MODIFY",
          "description": "Needs to pass the context prop and handle pending snapshots on mount."
        },
        {
          "path": "components/UserImageGallery.vue",
          "type": "TO_MODIFY",
          "description": "Needs to pass the context prop."
        }
      ],
      "implementationGuide": "1. In `components/UserImageGallery.vue`, add the `context=\"gallery\"` prop to the `<ImageViewerModal>` instance. \n2. In `components/TagCloud.vue`, add the `context=\"dream-session\"` prop to the `<ImageViewerModal>` instance. \n3. Also in `TagCloud.vue`, create a new function `loadPendingSnapshot()` that calls `tagStore.consumePendingSnapshot()` and then loads the state if a snapshot is returned. \n4. Call this new function from the `onMounted` lifecycle hook in `TagCloud.vue`.",
      "verificationCriteria": "1. When clicking 'Load Snapshot' from the gallery, verify the app navigates to `/dream/[dreamId]` and the correct snapshot is loaded. \n2. When clicking 'Load Snapshot' from the dream session modal, verify the graph updates directly without navigation and the modal closes.",
      "summary": "The integration of the snapshot logic is now complete. In `UserImageGallery.vue`, I added the `context='gallery'` prop to the `ImageViewerModal`. In `TagCloud.vue`, I added the `context='dream-session'` prop and implemented the `loadPendingSnapshot` function, which is called on mount. This function safely consumes a pending snapshot from the store, handles type mismatches for `promptText` and `graphState`, and then calls the appropriate store action to load the snapshot. All related linter errors, including a newly discovered one in `useImageGeneration.ts`, have been resolved. The feature should now work as designed across both contexts.",
      "completedAt": "2025-06-06T08:10:21.598Z"
    }
  ]
}